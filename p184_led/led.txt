
#define DEBUG 1
#define IMX_GPIO_NR(bank, nr)       (((bank) - 1) * 32 + (nr))

int led[] = {
    IMX_GPIO_NR(1, 16),   //16
    IMX_GPIO_NR(1, 17),   //17
    IMX_GPIO_NR(1, 18),   //18
    IMX_GPIO_NR(1, 19),   //19
};
static int led_init(void)
{
    int ret = 0;
    int i;

    for (i = 0; i < ARRAY_SIZE(led); i++) {
        ret = gpio_request(led[i], "gpio led");
        if(ret<0){
            printk("#### FAILED Request gpio %d. error : %d \n", led[i], ret);
        }
    }
    return ret;
}
static void led_exit(void)
{
    int i;
    for (i = 0; i < ARRAY_SIZE(led); i++){
        gpio_free(led[i]);
    }
}

void led_write(unsigned long data)
{
    int i;
    for(i = 0; i < ARRAY_SIZE(led); i++){
        gpio_direction_output(led[i], (data >> i ) & 0x01);
//      gpio_set_value(led[i], (data >> i ) & 0x01);
    }
#if DEBUG
    printk("#### %s, data = %ld\n", __FUNCTION__, data);
#endif
}



static int call_open(struct inode *inode, struct file *file){
	int num = MINOR(inode->i_rdev);
	printk("call open -> minor : %d\n",num);
	num = MAJOR(inode->i_rdev);
	printk("call open -> major : %d\n",num);
	return 0;
}

static loff_t call_llseek(struct file *filp, loff_t off, int whence){
	printk("call llseek -> off : %08x, whence : %08x\n",(unsigned int)off,whence);
	return 0x23;
}

static ssize_t call_read(struct file *filp, char *buf, size_t count, loff_t *f_pos){
	printk("call read -> buf : %08x, count : %08x \n", (unsigned int)buf,count);
	return 0x33;
}


static ssize_t call_write(struct file *filp, const char *buf, size_t count,loff_t *f_pos){
	printk("call write -> buf : %08x, count : %08x \n",(unsigned int)buf,count);
	led_init();
    led_write(*buf);
    led_exit();

